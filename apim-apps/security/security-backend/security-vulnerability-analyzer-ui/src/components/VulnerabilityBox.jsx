import React, { useState, useEffect } from "react";

//material ui
import { makeStyles } from "@material-ui/styles";
import {
  Divider,
  Button,
  Grid,
  Typography,
  Card,
  CardHeader,
  CardContent,
  CardActions,
  Collapse,
  IconButton,
  TextField,
  Select,
  MenuItem,
} from "@material-ui/core";

//components
import Alert from "./Alert";
import CustomDialog from "./CustomDialog";

//constants
import { severities } from "../constants";

//utils
import Utils from "../utils";

const { High, Low, Medium } = severities;

const useStyles = makeStyles(() => ({
  card: {
    boxShadow: "none",
    textAlign: "center",
    color: "black",
    backgroundColor: "white",
  },
  select: {
    width: "60%",
    paddingTop: "20px",
  },

  saveButtonStyle: {
    marginTop: "20px",
    backgroundColor: "#FF7300",
    textTransform: "capitalize",
  },
  gridStyle: {
    paddingTop: "2vh",
    paddingBottom: "2vh",
    borderRadius: "20px",
  },
  cardHeaderStyle: {
    borderTop: "3px solid rgb(255, 115, 0)",
  },
  severityStyleHigh: {
    backgroundColor: "#CC4F19",
    color: "white",
    marginRight: "0px",
    borderRadius: "5px",
    width: "80px",
  },
  severityStyleLow: {
    backgroundColor: "#86859D",
    color: "white",
    marginRight: "0px",
    borderRadius: "5px",
    width: "80px",
  },
  severityStyleMedium: {
    backgroundColor: "#D68100",
    color: "white",
    marginRight: "0px",
    borderRadius: "5px",
    width: "80px",
  },
  severityStyleCritical: {
    backgroundColor: "#BFBFBF",
    color: "white",
    marginRight: "0px",
    borderRadius: "5px",
    width: "80px",
  },
}));

const VulnerabilityBox = ({ vulnerability, addToArray }) => {
  const classes = useStyles();
  const { list, metadata } = vulnerability;
  const {
    cvssScore,
    description,
    fixedIn,
    id,
    identifiers,
    moduleName,
    severity,
    title,
    version,
    state,
    comment,
    saved,
  } = metadata;

  const [expanded, setExpanded] = useState(false);
  const [savedChange, setSavedChange] = useState(
    typeof saved === "undefined" ? false : true
  );

  const [open, setOpen] = useState(false);
  const [currentState, setCurrentState] = useState(state);
  const [commentAdded, setCommentAdded] = useState(
    comment === null ? "" : comment
  );
  const [stateMessage, setStateMessage] = useState("");
  const [commentMessage, setCommentMessage] = useState("");

  const handleExpandClick = () => {
    setExpanded(!expanded);
  };

  const handleSaveClick = () => {
    if (commentAdded === "" || currentState === "new") {
      if (commentAdded === "") {
        setCommentMessage("You have not commented yet.");
      }
      if (currentState === "new") {
        setStateMessage("You have not set a state yet.");
      }

      setOpen(true);
    } else {
      setSavedChange(true);
      addToArray({ id, commentAdded, currentState, savedChange: true });

      Alert.success("Saved Change Temporarily!");
    }
  };

  const handleChangeText = (event) => {
    setCommentAdded(event.target.value);
    setSavedChange(false);
    setCommentMessage(" ");
  };

  const handleChangeSelect = (event) => {
    setCurrentState(event.target.value);
    setSavedChange(false);
    if (event.target.value !== "new") {
      setStateMessage("");
    }
  };

  return (
    <>
      <CustomDialog open={open} setOpen={setOpen} title="Data is missing">
        <Typography variant="h6" component="div" style={{ flexGrow: 1 }}>
          {commentMessage}
        </Typography>
        <Typography variant="h6" component="div" style={{ flexGrow: 1 }}>
          {stateMessage}
        </Typography>
      </CustomDialog>

      <Grid container spacing={3} className={classes.gridStyle}>
        <Grid item xs={12}>
          <Card>
            <CardHeader
              className={classes.cardHeaderStyle}
              title={title}
              subheader={
                <Grid container>
                  {`${cvssScore}` !== "" ? (
                    <>
                      <Grid item md={1} xs={12}>
                        {` CVSS ${cvssScore}`}
                      </Grid>{" "}
                      <Divider
                        orientation="vertical"
                        variant="middle"
                        flexItem
                      />
                    </>
                  ) : (
                    <></>
                  )}

                  {Utils.getIdentifiers(identifiers).map((identifier, index) =>
                    identifier !== "" ? (
                      <>
                        <Grid item md={1} xs={12}>
                          {` ${identifier} `}
                        </Grid>
                        <Divider
                          orientation="vertical"
                          variant="middle"
                          flexItem
                        />
                      </>
                    ) : (
                      <></>
                    )
                  )}

                  <Grid item md={1} xs={12}>
                    {` ${state[0].toUpperCase() + state.substring(1)} `}
                  </Grid>
                  <Divider orientation="vertical" variant="middle" flexItem />
                  <Grid item md={1} xs={2}>
                    <Typography
                      align="center"
                      variant="subtitle1"
                      className={
                        severity === High
                          ? classes.severityStyleHigh
                          : severity === Medium
                          ? classes.severityStyleMedium
                          : severity === Low
                          ? classes.severityStyleLow
                          : classes.severityStyleCritical
                      }
                    >
                      {severity[0].toUpperCase() + severity.substring(1)}
                    </Typography>
                  </Grid>
                  <Divider orientation="vertical" variant="middle" flexItem />
                  <Grid item md={2} xs={12}>
                    {`${id}`}
                  </Grid>
                  <Divider orientation="vertical" variant="middle" flexItem />
                </Grid>
              }
            />

            <CardContent>
              <Typography>
                <Grid container>
                  <Grid item md={2} xs={12}>
                    <b>Vulnerable Module :</b>
                  </Grid>{" "}
                  <Grid item xs>
                    {" "}
                    {`${moduleName}@${version}`}
                  </Grid>{" "}
                </Grid>
              </Typography>
              <Typography>
                <Grid container>
                  <Grid item md={2} xs={12}>
                    <b>Fixed in :</b>
                  </Grid>{" "}
                  <Grid item xs>
                    {" "}
                    {Utils.getFixedIn(fixedIn, moduleName)}
                  </Grid>{" "}
                </Grid>
              </Typography>
              {Utils.getFrom(list).map((from, index) => (
                <Typography>
                  <Grid container>
                    <Grid item md={2} xs={12}>
                      <b>Introduced through :</b>{" "}
                    </Grid>{" "}
                    <Grid item xs>
                      {Utils.findIntroducedPath(from)}
                    </Grid>{" "}
                  </Grid>
                </Typography>
              ))}

              <CardActions disableSpacing>
                <IconButton
                  onClick={handleExpandClick}
                  aria-expanded={expanded}
                  aria-label="show more"
                >
                  <Button color="primary">
                    {expanded ? "Show less" : "Show more"}
                  </Button>
                </IconButton>
              </CardActions>
              <Collapse in={expanded} timeout="auto" unmountOnExit>
                <Typography
                  dangerouslySetInnerHTML={{
                    __html: Utils.getOverview(description),
                  }}
                />

                <Typography
                  dangerouslySetInnerHTML={{
                    __html: Utils.getRemediation(description, fixedIn),
                  }}
                />
              </Collapse>

              <TextField
                onChange={handleChangeText}
                fullWidth
                id="outlined-basic"
                label={commentAdded ? null : "Comment"}
                variant="outlined"
                value={commentAdded}
              />

              <Grid container>
                <Grid item xs={2}>
                  <Typography className={classes.select}>
                    <b>State</b>
                  </Typography>
                </Grid>
                <Grid item xs={2}>
                  <Select
                    labelId="demo-simple-select-label"
                    id="demo-simple-select"
                    value={currentState}
                    label="Set State to"
                    inputlabelprops={{
                      shrink: true,
                    }}
                    className={classes.select}
                    onChange={handleChangeSelect}
                  >
                    <MenuItem style={{ display: "none" }} value="new">
                      New
                    </MenuItem>

                    <MenuItem value="ignored">Ignored</MenuItem>
                    <MenuItem value="needToFix">Need To Fix</MenuItem>
                  </Select>
                </Grid>
              </Grid>

              <Button
                variant="contained"
                onClick={handleSaveClick}
                className={classes.saveButtonStyle}
              >
                {" "}
                {savedChange ? "Saved!" : "Save"}
              </Button>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </>
  );
};

export default VulnerabilityBox;
